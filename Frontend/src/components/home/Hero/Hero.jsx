import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import styles from './Hero.module.css';
import recipeService from '../../../services/recipeService';
import configService from '../../../services/configService';
import { Skeleton } from '../../ui/Skeleton/Skeleton';

function Hero() {
  const [heroRecipe, setHeroRecipe] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoaded, setIsLoaded] = useState(false);
  const [categories, setCategories] = useState([]);
  const [localizedCategories, setLocalizedCategories] = useState({});
  const [difficulties, setDifficulties] = useState({});
  const navigate = useNavigate();
  
  useEffect(() => {
    // –ó–∞—è–≤–∫–∏ –∫—ä–º –±–µ–∫–µ–Ω–¥ API –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –¥–∞–Ω–Ω–∏
    const fetchData = async () => {
      try {
        // –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ –∏ –ø—Ä–µ–≤–æ–¥–∞ –∏–º
        const config = await configService.getConfig();
        
        if (config) {
          // –ò–∑–≤–ª–∏—á–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ –∏ –ø—Ä–µ–≤–æ–¥–∞ –∏–º
          const categoriesData = config.recipe.categories.map(key => ({
            key,
            label: config.localization.categories[key] || key
          }));
          
          setCategories(categoriesData);
          setLocalizedCategories(config.localization.categories);
          setDifficulties(config.localization.difficulties);
        }
        
        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ recipeService –≤–º–µ—Å—Ç–æ –¥–∏—Ä–µ–∫—Ç–Ω–∞ fetch –∑–∞—è–≤–∫–∞
        const trendingRecipes = await recipeService.getTrendingRecipes(1);
        
        if (trendingRecipes && trendingRecipes.length > 0) {
          setHeroRecipe(trendingRecipes[0]);
        }
        
        setIsLoaded(true);
      } catch (error) {
        console.error('Error loading Hero section data:', error);
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–∞–º–µ, —á–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ä—Ç –≤—Å–µ –ø–∞–∫ —â–µ –±—ä–¥–µ –∑–∞—Ä–µ–¥–µ–Ω
        setIsLoaded(true);
      }
    };
    
    fetchData();
  }, []);
  
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    // –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ query –ø–∞—Ä–∞–º–µ—Ç—ä—Ä search –æ—Ç getRecipes API
    if (searchQuery.trim()) {
      navigate(`/recipes?search=${encodeURIComponent(searchQuery.trim())}`);
    }
  };
  
  // –ò–∑–±–æ—Ä –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å fallback
  const heroImage = heroRecipe?.images?.length > 0 
    ? heroRecipe.images[0].url
    : `https://images.unsplash.com/photo-1611326387235-8879d5276a2d?auto=format&fit=crop&w=2000&q=80`;
  
  // –õ–æ–∫–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç —Å–ø–æ—Ä–µ–¥ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç configAPI
  const getLocalizedDifficulty = (key) => {
    return difficulties[key] || key;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–Ω–∏–º–∫–∞—Ç–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ —Å fallback –∫—ä–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∏–∫–æ–Ω–∫–∞
  // –û–±—ä—Ä–Ω–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ profilePicture –≤–º–µ—Å—Ç–æ avatar —Å–ø–æ—Ä–µ–¥ JSON –æ—Ç–≥–æ–≤–æ—Ä–∞
  const getAuthorAvatar = () => {
    if (heroRecipe?.author?.profilePicture) {
      return (
        <img 
          src={heroRecipe.author.profilePicture} 
          alt={`${heroRecipe.author.username || '–ê–≤—Ç–æ—Ä'}`}
          className={styles.authorAvatar}
        />
      );
    }
    return <span className={styles.authorIcon}>üë®‚Äçüç≥</span>;
  };
  
  // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–æ –∏–º–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∞, –∞–∫–æ –≥–æ –∏–º–∞
  const getAuthorName = () => {
    const author = heroRecipe?.author;
    if (!author) return '–ê–Ω–æ–Ω–∏–º–µ–Ω';
    
    if (author.firstName && author.lastName) {
      return `${author.firstName} ${author.lastName}`;
    }
    
    return author.username || '–ê–Ω–æ–Ω–∏–º–µ–Ω';
  };
  
  return (
    <section className={styles.heroWrapper}>
      <div 
        className={`${styles.hero} ${isLoaded ? styles.loaded : ''}`}
        style={{
          backgroundImage: `linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.7)), url(${heroImage})`,
        }}
      >
        <div className={styles.overlay}>
          <div className={styles.container}>
            <div className={styles.content}>
              <h1 className={styles.title}>
                <span className={styles.highlightText}>–í–∫—É—Å–Ω–∏</span> —Ä–µ—Ü–µ–ø—Ç–∏ –∑–∞ –≤—Å–µ–∫–∏ –ø–æ–≤–æ–¥
              </h1>
              
              <p className={styles.subtitle}>
                –û—Ç–∫—Ä–∏–π—Ç–µ —Å–≤–µ—Ç–∞ –Ω–∞ –∫—É–ª–∏–Ω–∞—Ä–∏—è—Ç–∞ –∏ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–µ—Ç–µ –∫—ä–º —Ö–∏–ª—è–¥–∏ –µ–Ω—Ç—É—Å–∏–∞—Å—Ç–∏, 
                –∫–æ–∏—Ç–æ —Å–ø–æ–¥–µ–ª—è—Ç —Å–≤–æ–∏—Ç–µ –ª—é–±–∏–º–∏ —Ä–µ—Ü–µ–ø—Ç–∏ –≤—Å–µ–∫–∏ –¥–µ–Ω
              </p>
              
              <div className={styles.searchWrapper}>
                <form className={styles.searchForm} onSubmit={handleSearchSubmit}>
                  <div className={styles.searchContainer}>
                    <span className={styles.searchIconLeft}>üîç</span>
                    <input
                      type="text"
                      placeholder="–¢—ä—Ä—Å–∏ —Ä–µ—Ü–µ–ø—Ç–∏, —Å—ä—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏..."
                      className={styles.searchInput}
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      aria-label="–¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∏"
                    />
                    <button type="submit" className={styles.searchButton}>
                      –¢—ä—Ä—Å–∏
                    </button>
                  </div>
                </form>
              </div>
              
              {isLoaded ? (
                <div className={styles.popularTags}>
                  <span className={styles.tagLabel}>–ü–æ–ø—É–ª—è—Ä–Ω–∏: </span>
                  <div className={styles.tags}>
                    {categories.slice(0, 4).map(category => (
                      <Link 
                        key={category.key}
                        to={`/recipes?category=${category.key}`}
                        className={styles.tag}
                      >
                        {category.label}
                      </Link>
                    ))}
                  </div>
                </div>
              ) : (
                <div className={styles.popularTags}>
                  <span className={styles.tagLabel}>–ü–æ–ø—É–ª—è—Ä–Ω–∏: </span>
                  <div className={styles.tags}>
                    {[1, 2, 3, 4].map(i => (
                      <span key={i} className={`${styles.tag} ${styles.tagSkeleton}`}>
                        <Skeleton width="60px" height="16px" />
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {heroRecipe ? (
            <div className={styles.featuredRecipeInfo}>
              <div className={styles.featuredTag}>–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–µ–Ω—è</div>
              <Link to={`/recipes/${heroRecipe._id}`} className={styles.featuredTitle}>
                {heroRecipe.title}
              </Link>
              
              {/* –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–Ω–∞ —Å–Ω–∏–º–∫–∞ –æ—Ç author.profilePicture */}
              {heroRecipe.author && (
                <Link to={`/users/${heroRecipe.author._id}`} className={styles.authorSection}>
                  <div className={styles.authorImageContainer}>
                    {getAuthorAvatar()}
                  </div>
                  <div className={styles.authorInfo}>
                    <span className={styles.authorName}>
                      {getAuthorName()}
                    </span>
                    {heroRecipe.author.username && heroRecipe.author.firstName && (
                      <span className={styles.authorUsername}>@{heroRecipe.author.username}</span>
                    )}
                  </div>
                </Link>
              )}
              
              <div className={styles.featuredMeta}>
                <span className={styles.likeCount}>
                  ‚ù§Ô∏è {heroRecipe.likesCount || heroRecipe.likes?.length || 0}
                </span>
                <span className={styles.difficulty}>
                  {heroRecipe.difficulty === 'easy' && '‚óè '}
                  {heroRecipe.difficulty === 'medium' && '‚óè‚óè '}
                  {heroRecipe.difficulty === 'hard' && '‚óè‚óè‚óè '}
                  {getLocalizedDifficulty(heroRecipe.difficulty)}
                </span>
                <span className={styles.time}>‚è±Ô∏è {heroRecipe.preparationTime} –º–∏–Ω</span>
                {heroRecipe.commentCount !== undefined && (
                  <span className={styles.commentCount}>üí¨ {heroRecipe.commentCount}</span>
                )}
              </div>
              <div className={styles.featuredTags}>
                <span className={styles.categoryTag}>
                  {localizedCategories[heroRecipe.category] || heroRecipe.category}
                </span>
                {heroRecipe.servings && (
                  <span className={styles.servingsTag}>
                    {heroRecipe.servings} {heroRecipe.servings === 1 ? '–ø–æ—Ä—Ü–∏—è' : '–ø–æ—Ä—Ü–∏–∏'}
                  </span>
                )}
              </div>
            </div>
          ) : isLoaded ? (
            <div className={styles.featuredRecipeInfo}>
              <div className={styles.featuredTag}>–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–µ–Ω—è</div>
              <span className={styles.featuredTitle}>–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏ —Ä–µ—Ü–µ–ø—Ç–∏...</span>
            </div>
          ) : (
            <div className={styles.featuredRecipeInfo}>
              <div className={styles.featuredTag}><Skeleton width="100px" height="18px" /></div>
              <div className={styles.featuredTitleSkeleton}>
                <Skeleton width="250px" height="28px" />
              </div>
              {/* –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞ –∞–≤—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className={styles.authorSection}>
                <div className={styles.authorImageContainer}>
                  <Skeleton width="40px" height="40px" borderRadius="50%" />
                </div>
                <div className={styles.authorInfo}>
                  <Skeleton width="120px" height="16px" />
                  <Skeleton width="80px" height="12px" />
                </div>
              </div>
              <div className={styles.featuredMeta}>
                {[1, 2, 3, 4].map(i => (
                  <span key={i} className={styles.metaItemSkeleton}>
                    <Skeleton width="80px" height="18px" />
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className={styles.wave}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 100">
          <path fill="#f9f9f9" fillOpacity="1" d="M0,64L80,69.3C160,75,320,85,480,80C640,75,800,53,960,53.3C1120,53,1280,75,1360,85.3L1440,96L1440,100L1360,100C1280,100,1120,100,960,100C800,100,640,100,480,100C320,100,160,100,80,100L0,100Z"></path>
        </svg>
      </div>
    </section>
  );
}

export default Hero;